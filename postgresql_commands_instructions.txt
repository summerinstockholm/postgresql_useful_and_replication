Установим postgresql и postgresql-contrib
root@dev-stage-1:~# apt install postgresql postgresql-contrib
postgresql установился, смотрим командный интерпретатор, для этого переходим под пользователя postgres и из под него вызовем командный интерпретатор psql:
root@dev-stage-1:~# su postgres
postgres@dev-stage-1:/root$ psql
Команды пострегреса указываются через слеш в начале команды - \. Команда \l выведет список баз данных:
postgres=# \l
Команда \du выведет пользователей:
postgres=# \du
Команды SQL пишутся заглавными буквами, а значения команд с маленькой, точка запятой в конце. Создать пользователя можно вот так:
postgres=# CREATE USER user1;
К каждой постргрес команде можно добавить знак плюса и будут выведены дополнительные поля и информация:
postgres=# \l+
Создать базу:
postgres=# CREATE DATABASE test1;
База будет создана, но будет пустой.
Можно наполнить ее вручную, но лучше наполнить ее из вне. Взять дамп и залить ее в свежесозданную пустую бд.
https://github.com/pthom/northwind_psql - возьмем этот дамп и зальем ее в нашу бд.
Склонируем его в tmp
root@dev-stage-1:~# cd /tmp/
root@dev-stage-1:~# git clone https://github.com/pthom/northwind_psql.git
Перейдем в папку с директорией northwind_psql
root@dev-stage-1:~# cd northwind_psql/
И посмотрим что внутри есть northwind_psql.sql который и содержит инструкции по созданию таблиц и наполнению их данными:
root@dev-stage-1:~# less northwind.sql
Переключаемся на пользователя postgresql и катим дамп:
root@dev-stage-1:~# su postgres
postgres@dev-stage-1:~# cd northwind_psql/
postgres@dev-stage-1:/tmp/northwind_psql$ psql -d test1 -f northwind.sql
Дамп залит.
Переходим в командный интерпретатор, коннектимся к БД, смотрим какие таблицы есть в БД и какие-нибудь данные из любой таблицы.
postgres@dev-stage-1:/tmp$ psql
postgres=# \c test1 
postgres=# \dt
postgres=# SELECT * FROM products;
Как сделать ее бекап? В постгрескл дамп не блокирующий. Можно делать на живой базе. Есть две утилиты pgdump и pgdumpall
Под пользователем postgres выполнить команду:
postgres@dev-stage-1:/tmp$ pg_dump test1 > /tmp/dump.sql
Теперь разберемся с тем чтобы посмотреть что происходит на сервере под капотом через утилиту pg_activity. С помощью этой утилиты можно посмотреть какие транзакции выполняются, найти зависшие транзакции, поубивать ненужные и т.д.
Сначала установим утилиту:
root@dev-stage-1:~# apt install pg-activity
Но сейчас мониторить нечего, так как наш инстанс ничем не загружен. Был поставлен пакет postgresql-contrib в этом пакете есть утилита которая называется pgbench - это утилита для стресс тестирования, добавляет нагрузку.
Однако изначально нужно настроить postgresql. Открыть из под рута например /etc/postgresql/12/main/pg_hba.conf - это файл для разрешений аутентификаций клиентов, каким клиентам можно подключаться к каким базам данным.
root@dev-stage-1:~# nano pg_hba.conf
В файле pg_hba.conf поменять для Database administrative login by Unix domain socket с peer на trust. То есть локальной утилите pg_bench предоставить доступ на использование БД. Затем в "local" is for Unix domain socket connections only поменять тоже на trust.
В IPv4 local connections и IPv6 local connections с md5 поменять на trust. Затем сохраняем файл и перезапускаем сервис postgresql:
root@dev-stage-1:~# service postgresql restart
После перезапуска postgresql убедится что он запустился и прослушивает дефолтный порт:
root@dev-stage-1:~# ss -tpnln
Переключаемся на пользователя postgres:
root@dev-stage-1:~# su postgres
Стресс тест состоит из двух частей. Первая часть - pg_bench готовит бд для тестирования, добавляет к уже существующей бд какие-то своим данные, для того чтобы с ними работать.
postgres@dev-stage-1:/root$ pgbench -h localhost -p 5432 -U postgres -i -s 100 test1
Затем открываем еще раз подключение к этой же вм, но отдельной консолью, чтобы наблюдать через pg_activity за нагрузкой.
Под пользователем postgres выполнить команду:
postgres@dev-stage-1:pg_activity
Вернемся к первому терминалу первой вм, где будем запускать pgbench но уже с нагрузкой:
postgres@dev-stage-1:/root$ pgbench -h localhost -p 5432 -U postgres -c 50 -j 2 -P 60 -T 600 test1
где аргумент -с - это количество одновременнов клиентов (сеансов) к бд
аргумент -j - это количестов рабочих потоков
-P - отображать прогресс каждые 60 секунд
-T - на какое время будет производится стресс-тестирование
Репликация - это копирование данных с одного сервера на другой. Когда изменяем данные все изменения записываются в WAL (Write-ahead log). Если с реплики разрешено читать то она называется
hot-standby, если нет, то - warm-standby. Репликация бывает асинхронная, то есть запрос сначала выполняется на мастере, а все соотвествующие данные доезжают до реплик отдельно в фоне.
Синхронная репликая - данные записываются как минимум в wal одной реплики, после чего транзакция выполняется на мастере.
Обычно в мастер данные записывают, со слейвов читают.
Итак, настраиваем репликацию.
На второй ВМ устанавливаем postgresql:
root@dev-stage-2:~# apt install postgresql
Версии постгреса на мастере и слейве должны быть одинаковы.
На первой ВМ открыть файл postgresql.conf:
root@dev-stage-1:~# nano /etc/postgresql/12/main/postgresql.conf
В нем раскоментить/отредактировать следующие параметры:
listen_addresses = '*' - слушать все адреса.
max_connections = 100 - максимальное количество коннектов к постгресу
wal_level = replica - раскоментить, параметр определяет как много информации будет записываться в журнал wal.
wal_log_hints = on
max_wal_senders = 10 - количество реплик
wal_keep_segments = 64 - задает число файлов сегментов журнала
hot_standby = on - можно ли выполнять запросы в процессе восстановления
Файл сохранить.
Затем открыть pg_hba.conf чтобы разрешить реплики подключаться и стягивать себе данные:
root@dev-stage-1:~# nano /etc/postgresql/12/main/pg_hba.conf
В разаделе # Allow replication connections from localhost, by a user with the
# replication privilege.
host    all             all             84.201.177.137/32       md5
хостам, ко всем бд ото всех пользователей от такого вот ip адреса с маской 32 (т.е. 1 ip адрес), где md5 - это пароль
и еще сточку:
host    replication     postgres        84.201.177.137/32       md5
Сохраяем, перезапускаем postgresql
root@dev-stage-1:~# service postgresql restart
Смотрим что поменялось:
root@dev-stage-1:~# ss -tpnln
Теперь переходим на слейв вм-2. Физически БД на слейве БД хранится тут:
root@dev-stage-2:~# cd /var/lib/postgresql/main/base
В каталоге pg_wal - в нем уже появились бинарники (сегменты)
В общем на слейве нужно очистить содержимое папки main:
root@dev-stage-2:~# /var/lib/postgresql/main/base rm -rf main/*
Вернуться на мастер вм-1 и установить пароль для пользователя postgres:
root@dev-stage-1:~# su postgres
postgres@dev-stage-1:/root$ psql
postgres=# ALTER USER postgres WITH PASSWORD ''
На вм-2 слейве стартуем реплику:
root@dev-stage-2:~# pg_basebackup -P -R -X stream -c fast -h 84.201.179.251 -U postgres -D /var/lib/postgresql/main
Первоначальное копирование пошло. 
Но тут права у директории main у пользователя/группы main postgres, но все что внутри под рутом, нужно сменить владельца:
root@dev-stage-2:~# chown -R postgres:postgres /var/lib/postgresql/12/main/
Перезапускаем на слейве сервис и смотрим:
root@dev-stage-2:~# service postgresql restart
root@dev-stage-2:~# ss -tpln
Проверка репликации:
postgres=# \l
должна появится бд test1
На мастере можно добавить еще одну бд
postgres=# CREATE DATABASE test3;
На слейве 
postgres=# \l
Должна появится БД test3.
Посмотреть логи можно тут:
root@dev-stage-1:~# nano /var/log/postgresql/postgresql-12-main.log
Полезные утилиты:
Визуализатор логов - https://github.com/darold/pgbadger
Балансировщик/прокси - https://www.pgbouncer.org/
Полезная вещь для настройки постргреса - https://pgtune.leopard.in.ua/
Сделаем на вм-3 еще одну реплику и настроим временной лаг в 5 мин.
Ставим на вм-3 postgresql:
root@dev-stage-3:~# apt install postgresql
На первой вм в файле pg_hba.conf добавляем вм-3
root@dev-stage-1:~# nano /etc/postgresql/12/main/pg_hba.conf
Две строчки:
host    all             all             84.201.139.208/32       md5
host    replication     postgres        84.201.139.208/32       md5
В файле
root@dev-stage-1:~# nano /etc/postgresql/12/main/postgresql.conf
В нем раскоментить/отредактировать следующие параметры:
recovery_min_apply_delay - 5min
Сохраняем и рестартаем сервис:
root@dev-stage-1:~# service postgresql restart
На вм-3 удаляем БД:
root@dev-stage-2:~# /var/lib/postgresql/main/base rm -rf main/*
На вм-3 слейве стартуем реплику:
root@dev-stage-2:~# pg_basebackup -P -R -X stream -c fast -h 84.201.179.251 -U postgres -D /var/lib/postgresql/main
Меняем владельца
root@dev-stage-3:/var/lib/postgresql/12/main# chown -R postgres:postgres /var/lib/postgresql/main/
Проверяем на первой машине создав еще одну БД:
postgres=# CREATE DATABASE test4;
Затем создаем в ней таблицу
postgres=# \c test4
test4=# CREATE TABLE users(Id SERIAL PRIMARY KEY, Username CHARACTER VARYING(30));
Смотрим на вм-3 через 5 мин есть ли такая таблица в базе test4:
postgres=# \c test4
You are now connected to database "test4" as user "postgres".
test4=# \dt
         List of relations
 Schema | Name  | Type  |  Owner
--------+-------+-------+----------
 public | users | table | postgres
(1 row)
Выключаем вм-1. 
В логах постргреса на вм-3 увидим:
2022-11-20 13:15:29.022 UTC [4657] FATAL:  could not connect to the primary server: could not connect to server: Connection refused
                Is the server running on host "84.201.179.251" and accepting
                TCP/IP connections on port 5432?
2022-11-20 13:17:44.566 UTC [4659] FATAL:  could not connect to the primary server: could not connect to server: Connection timed out
                Is the server running on host "84.201.179.251" and accepting
                TCP/IP connections on port 5432?
Затем на вм-3 выполняем функцию pg_promote:
postgres=# select pg_promote();
 pg_promote
------------
 t
(1 row)
Таким образом в логах увидим следующее:
2022-11-20 13:18:25.782 UTC [4545] LOG:  received promote request
2022-11-20 13:18:25.782 UTC [4668] FATAL:  terminating walreceiver process due to administrator command
2022-11-20 13:18:25.782 UTC [4545] LOG:  redo done at 0/9E01E048
2022-11-20 13:18:25.782 UTC [4545] LOG:  last completed transaction was at log time 2022-11-20 13:10:27.401373+00
2022-11-20 13:18:25.788 UTC [4545] LOG:  selected new timeline ID: 2
2022-11-20 13:18:25.934 UTC [4545] LOG:  archive recovery complete
2022-11-20 13:18:25.965 UTC [4544] LOG:  database system is ready to accept connections


